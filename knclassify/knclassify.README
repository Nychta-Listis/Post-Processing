*************************************************************************
*                       Welcome to KN-Classify!                         *
*                                                                       *
*         Written by Robert Morgan, robert.morgan@wisc.edu              *
*************************************************************************

Overview: 
  This program is designed to select kilonovae light curves from DES
  DiffImg outputs. It uses a Random Forest Classifier from Sci-Kit Learn.

Operations:
  The rapid follow-up for the LIGO trigger should have had one of four 
  possible cadences. Please note the code that applies to yours below:
            |          Cadence            |      Code     |
            |-----------------------------|---------------|
            | One epoch in i and r        |      ir2      |
            | One epoch in i and z        |      iz2      |
            | Two epochs in i and r       |      ir4      |
            | Two epochs in i and z       |      iz4      |
            |---------------------------------------------|
  Based on your cadence, KN-Classify will create a model for selecting 
  KN light curves and rejecting background light curves. All light 
  curves are simulated using SNANA.

  Features: The random forest classifier inside KN-Classify extracts the
    following information from light curves to do the classification:
    ['FILENAME', 'NOBS', 'BANDS', 'RA', 'DEC', 'BRIGHTEST', 'RISE_z', 
    'RISE_i', 'RISE_r', 'MAX_r-i', 'MIN_r-i', 'MAX_i-z', 'MIN_i-z', 
    'MAX_SNR_z', 'MAX_SNR_i', 'MAX_SNR_r', 'CUT_1', 'CUT_2', 'CUT_3', 
    'CCD', 'MAG_r', 'MAG_i', 'MAG_z', 'EXPNUM_1', 'EXPNUM_2','EXPNUM_3', 
    'EXPNUM_4']
  Later versions of KN-Classify will contain documentation of each feature,
  but for the time being, you can see how each feature is calculated by
  examing the features.py script that is called by KN-Classify to do the
  feature extraction.
    

Requirements:
  File structure---------
     * Make a directory in the current working directory (i.e. datadir)
     * Make a subdirectory named 'data' inside 'datadir'
     * Put all .DAT files inside 'datadir/data'
     * Put a list file of .DAT files (i.e. datadir.LIST) inside 'datadir'
     *** Look at 'testdir_XXX' to see an example
  System requirements-----
     * This script has been developed and tested using:
          python 2.7.14
          numpy 1.13.3
          pandas 0.22.0
          sklearn 0.19.1

*************************************************************************

Instructions:

0) Read the README file. Congrats you're already here!

1) Set up your directory structure to match the supplied test
   directories (testdir_ir2, testdir_ir4, testdir_iz2, testdir_iz4).
   This will look like:
   DATAFILE_DIR/
	-DATAFILE_DIR.LIST
	-DATA/
	    -*.DAT

** Alternatively, you can just keep everything in the same directory.
   In this case, your file structure will look like this:
   LightCurvesReal/
	-LightCurvesReal.LIST
	-LightCurvesReal.IGNORE
	-LightCurvesReal.README
	-*.DAT

2) Check that your system has the modules listed above installed. If
   the versions on your system are incompatible with the script, either
   modify the script or create an environment with the same versions
   that are listed above.

   (On the Fermilab version of KN-Classify, this is taken care of)

3) Run KN-Classify via the command 'python knclassify.py' and follow
   the prompts.

4) Output will be written to a file 'KN-Report.csv'. This file is
   automatically clobbered each run, so rename it if you wish to save
   the results from a previous run.

5) One test directory for each cadence has been provided. To do a
   trial run of KN-Classify, do 'python classifier.py', enter one of
   the possible cadences, then enter testdir_XXX at the next prompt
   (XXX = the cadence code you chose), and that's it! You can view
   the results in the outfile 'KN-Report.txt'.

6) At the end of the script, KN-Classify will estimate the number of
   potential KN that it found. This estimate is just the number of
   light curves with a probability larger than 0.9 of being a KN.
   Sometimes this number will be zero.
   
          ALWAYS CHECK THE OUTPUT REPORT 'KN-Report.txt' !!!
	  
   True KN light curves will sometimes have a lower probability than
   0.8, but still be the most probable light curve in the data. You
   can see this for yourself by trying out some of the test directories.

*************************************************************************

Feel free to contact me with any issues that arise, or if you would like
to use this script in a scientific analysis.

     Robert Morgan
     robert.morgan@wisc.edu